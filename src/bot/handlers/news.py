from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from src.bot.states import UserState
from src.bot.config import sub_service
from src.bot.keyboards.news_keyboards import stop_keyboard, confirmation_keyboard

router = Router()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.set_state(UserState.add_category)

    kb = stop_keyboard()

    await message.answer(text=(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Tech Digest</b>!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º, "
        "–∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
        ),
        parse_mode="HTML",
        reply_markup=kb
    )


@router.message(UserState.add_category)
async def add_category(message: Message, state: FSMContext):
    category = message.text.lower().strip()
    sub_service.subscribe(category, message.from_user.id)

    kb = stop_keyboard()

    await message.answer(
        text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <i>{category}</i> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
             "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        parse_mode="HTML",
        reply_markup=kb
    )


@router.callback_query(
    F.data == "stop",
    StateFilter(UserState.add_category)
)
async def confirm_categories(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    categories = sub_service.get_user_categories(user_id)

    if not categories:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!", show_alert=True)
        return

    categories_list = "\n".join(f"- {cat}" for cat in categories)
    
    kb = confirmation_keyboard()
    await callback.message.answer(
        text=(
            "üìÇ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
            f"{categories_list}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä?"
        ),
        parse_mode="HTML",
        reply_markup=kb
    )

    await state.set_state(UserState.confirm_categories)
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")


@router.callback_query(
    F.data.in_(["confirmation_yes", "confirmation_no"]),
    StateFilter(UserState.confirm_categories)
)
async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirmation_yes":
        categories = sub_service.repo.get_user_categories(callback.from_user.id)

        await callback.message.answer(
            text=(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
                f"<i>{', '.join(categories)}</i>\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ —Å–≤–µ–∂–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üöÄ"
            ),
            parse_mode="HTML"
        )
        await state.set_state(UserState.subscribed)

    elif callback.data == "confirmation_no":
        sub_service.unsubscribe_all(callback.from_user.id)

        await callback.message.answer(
            text=(
                "üîÑ –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º —Å–ø–∏—Å–æ–∫.\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
            )
        )
        await state.set_state(UserState.add_category)

    await callback.message.edit_reply_markup(reply_markup=None)

